openapi: 3.0.2
servers:
  - url: 'https://api.umpyre.io/'
info:
  description: >-
    Umpyre API ðŸ‘€
  version: 1.0.0
  title: Umpyre API
paths:
  /user/authenticate:
    post:
      summary: Authenticate user
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: []
      operationId: authenticate
      responses:
        '200':
          description: >
            Successfully authenticated.
            
            The token is returned in a secure cookie named
            `X-UMPYRE-APIKEY`. You need to include this cookie in subsequent
            requests, or pass the token with the `X-UMPYRE-APIKEY` header.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: X-UMPYRE-APIKEY=token; Path=/; HttpOnly
        '401':
           $ref: "#/components/responses/UnauthorizedError"
  /user/{user_id}:
    get:
      summary: >-
        Get user info
      description: >-
        Fetches and returns the user info object for the provided user ID.
      operationId: get-user
      parameters:
        - name: user_id
          in: path
          description: 'User ID.'
          required: true
          example: "aca0da3ee24b41d0a98d9a4f6256aa78"
          schema:
            type: string
      responses:
        '200':
          description: >-
            The user exists and is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: >-
            The user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: >-
        Update user info
      description: >-
        Updates the underlying user model for the provided user ID.
      operationId: update-user
      responses:
        '200':
          description: >-
            The user exists and is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: >-
            The user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
  /user:
    post:
      summary: >-
        Create a new user
      description: >-
        Creates a new user with the supplied user model. A unique user ID
        will be generated by the server.
      operationId: create-user
      security: []
      requestBody:
        description: The user to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: >-
            The user was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: >-
            The user could not be created.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
  /messages:
    get:
      summary: >-
        Get all messages
      description: >-
        Returns all of the messages in a user's inbox stored on the server.
      operationId: get-messages
      responses:
        '200':
          description: >-
            The user exists and is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        '404':
          description: >-
            The specified user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: >-
        Send a message
      description: >-
        Send a message from the calling user's account to another user. 
      operationId: send-message
      requestBody:
        description: Message to send.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: >-
            The user exists and is available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Messages'
        '404':
          description: >-
            The user does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Error'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: >-
            Unique identifier for this user.
        name:
          type: string
          description: >-
            Public display name of this user.
        public_key:
          type: string
          description: >-
            Public key for this user.
    NewUser:
      type: object
      properties:
        name:
          type: string
          description: >-
            Public display name of this user.
        public_key:
          type: string
          description: >-
            Public key for this user.
        password_hash:
          type: string
          description: >-
            A SHA256 hash of the user's password. Do not send the plain-text
            password to the server.
      required:
      - name
      - public_key
      - password_hash
    Message:
      type: object
      properties:
        from:
          type: string
          description: >-
            User ID of sender.
        to:
          type: string
          description: >-
            User ID of recipient.
        text:
          type: string
          description: >-
            Text body of message, encrypted using a libsodium Box.
      required:
      - from
      - to
      - text
    Messages:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    LoginRequest:
      type: object
      properties:
        user:
          type: string
          description: >-
            User ID for the login request.
        password_hash:
          type: string
          description: >-
            A SHA256 hash of the user's password. Do not send the plain-text
            password to the server.
      required:
      - user
      - password_hash
  responses:
    UnauthorizedError:
      description: Credentials missing or invalid.
      headers:
        "WWW-Authenticate":
          schema:
            type: string
    Error:
      description: Error response.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: >-
                  A description of the error.
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      in: header
      name: X-UMPYRE-APIKEY
    apiKeyCookie:
      type: apiKey
      in: cookie
      name: X-UMPYRE-APIKEY
security:
  - apiKeyHeader: []
  - apiKeyCookie: []
